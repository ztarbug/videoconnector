syntax = "proto3";

package videoconnector;

import "google/protobuf/timestamp.proto";

message RegisterRequest {
    string hostname = 1;
}

message RegisterResponse {
    int32 id = 1;
}

message UnRegisterRequest {
    string hostname = 1;
    int32 client_id = 2;
}

message UnRegisterResponse {
    
}

enum CommandType {
    NoNew = 0;
    Stop = 1;
    Resume = 2;
    StopAndShutdown = 3;
    GetImage = 4;
    GetSourceInfo = 5;
}

message CommandRequest {
    google.protobuf.Timestamp clientTimestamp = 1;
    string connectorHostname = 2;
    int32 client_id = 3;
}

message CommandList {
    google.protobuf.Timestamp serverTimestamp = 1;
    repeated CommandType commands = 2;
}

message TransferImageRequest {
    google.protobuf.Timestamp clientTimestamp = 1;
    int32 client_id = 2;
    bytes image = 3;
}

message ServerAckResponse {
    google.protobuf.Timestamp serverTimestamp = 1;
}

message SourceInfoRequest {
    google.protobuf.Timestamp clientTimestamp = 1;
    string sourceInfo = 2;
}

//CameraConnector
service VideoConnector {

    // Method to register a new client
    rpc RegisterClient(RegisterRequest) returns (RegisterResponse);

    // Method to unregister a client
    rpc UnRegisterClient(UnRegisterRequest) returns (UnRegisterResponse);

    // get commands for connector
    rpc GetCommand(CommandRequest) returns (CommandList);

    // get debug info on current video source
    rpc DeliverSourceInfo(SourceInfoRequest) returns (ServerAckResponse);

    // used to transfer an image
    rpc TransferImage(TransferImageRequest) returns (ServerAckResponse);
}